" General
set encoding=utf-8
set fileencodings=utf-8
set t_Co=256
set ruler
set nocompatible

" yank to clipboard
if has("clipboard")
  "Mac OS X clipboard sharing
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif


" Commands
" % - A symbolic identifier to specify a range. % defines a range from the
" first to the last line of the current buffer. You could also specify line
" numbers like 2,5 which defines the range from line 2 to line 5. Another
" possible way to define a range is to use Visual Mode. Simply select your
" target lines and type :. This prepares the command line with '<,'>, which is
" the range definition for “Everything that has been visually selected”.
"
" ! - Starting your command with ! lets you run any shell command from within
" Vim. Having a range selected before makes the shell using that as standard
" input stream.
" com! -range=% JSONFormat <line1>!python3 ~/.vim/json_format.py
com! JSONFormat %!python3 ~/.vim/json_format.py


function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()


" Colors
colorscheme xoria256
syntax enable       " enable syntax processing

" Spaces and  Tabs
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
set shiftwidth=4    " the size of an 'indent'

" UI Config
set number          " show line numbers
set showcmd         " show command in bottom bar
set cursorline      " highlight current line
set laststatus=2    " always show statusline
set cmdheight=2     " height of the command bar
set showmatch       " highlight matching [{()}]
set textwidth=79
set colorcolumn=80 " - or + to put the marker to the left or right of textwidth
highlight ColorColumn ctermbg=lightgrey

" Search
set hlsearch        " highlight search terms
set incsearch       " find as you type search

" Filetype
filetype on
filetype plugin indent on

" Python
autocmd Filetype python set autoindent
autocmd Filetype python set smartindent

